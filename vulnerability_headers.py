import requests
import logging

def vulnerability_headers():
    #configure logging
    logging.basicConfig(filename='vulnerability_headers.log',
                        level=logging.INFO,
                        format='%(asctime)s - %(levelname)s - %(message)s'
                        )
    
    #list of safe headers
    security_headers=[
        "Strict-Transport-Security",
        "Content-Security-Policy",
        "X-Content-Type-Options",
        "X-Frame-Options",
        "X-XSS-Protection",
        "Referrer-Policy",
        "Permissions-Policy"
        ]
    
    url=input('Ingrese la dirección de la página que desea verificar:')

    try:
        response=requests.get(url)
        #get url headers
        headers=response.headers
        logging.info(f'\nAnalizando {url}\n')
        print(f'Analizando {url}')

        #Counts the secure headers found
        secure_headers_found=0

        #Check for the presence of the security headers
        for header in security_headers:
            if header in headers:
                message=f'{header}: Encontrado'
                logging.info(message)
                print(message)
                secure_headers_found += 1
            else:
                message=f'{header}: No encontrado'
                logging.warning(message)
                print(message)

        #gives the name of the server
        server=headers.get('server', 'Desconocido')
        smessage=f'\nServidor: {server}'
        print(smessage)
        logging.info(smessage)

        #Notify if the page is considered safe
        if secure_headers_found == 0:
            print('\nLa página no parece ser segura\n No se encuentran headers de seguridad')
            logging.warning('La página no parece ser segura\n No se encuentran headers de seguridad')
        else:
            print('La página parece ser segura')
            logging.info('\nLa página parce ser segura')
            
    #error management
    except requests.exceptions.RequestException as e:
        error=f'\nError al conecctarse a {url}: {e}'
        print(error)
        logging.error(error)
